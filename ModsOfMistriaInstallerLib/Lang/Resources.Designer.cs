//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Garethp.ModsOfMistriaInstallerLib.Lang {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Garethp.ModsOfMistriaInstallerLib.Lang.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Completed. Press any key to exit..
        /// </summary>
        public static string CLICompleted {
            get {
                return ResourceManager.GetString("CLICompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Running Build {0}.
        /// </summary>
        public static string CLIRunningBuild {
            get {
                return ResourceManager.GetString("CLIRunningBuild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All mods uninstalled. Press any key to exit..
        /// </summary>
        public static string CLIUninstallComplete {
            get {
                return ResourceManager.GetString("CLIUninstallComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You&apos;re running a 64-bit operating system, but have accidently downloaded the 32-bit version of MOMI. Please download the version of MOMI that does not include &quot;-x86&quot;..
        /// </summary>
        public static string CLIWarning32Bit {
            get {
                return ResourceManager.GetString("CLIWarning32Bit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the manifest file..
        /// </summary>
        public static string CoreCouldNotFindModManifest {
            get {
                return ResourceManager.GetString("CoreCouldNotFindModManifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a mods folder at {0}..
        /// </summary>
        public static string CoreCouldNotGuessModsAt {
            get {
                return ResourceManager.GetString("CoreCouldNotGuessModsAt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not parse file with message: {0}.
        /// </summary>
        public static string CoreCouldNotParseJSON {
            get {
                return ResourceManager.GetString("CoreCouldNotParseJSON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This mod will only run on Windows and will not install..
        /// </summary>
        public static string CoreErrorModRequiresWindows {
            get {
                return ResourceManager.GetString("CoreErrorModRequiresWindows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item {0} does not state if it overwrites another mod..
        /// </summary>
        public static string CoreErrorNewItemHasNoOverwritesOtherMod {
            get {
                return ResourceManager.GetString("CoreErrorNewItemHasNoOverwritesOtherMod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object {0} does not state if it overwrites another mod..
        /// </summary>
        public static string CoreErrorNewObjectHasNoOverwritesOtherMod {
            get {
                return ResourceManager.GetString("CoreErrorNewObjectHasNoOverwritesOtherMod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object {0} has an invalid category {1}..
        /// </summary>
        public static string CoreErrorNewObjectInvalidCategory {
            get {
                return ResourceManager.GetString("CoreErrorNewObjectInvalidCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object {0} has no category..
        /// </summary>
        public static string CoreErrorNewObjectNoCategory {
            get {
                return ResourceManager.GetString("CoreErrorNewObjectNoCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object {0} has no data..
        /// </summary>
        public static string CoreErrorNewObjectNoData {
            get {
                return ResourceManager.GetString("CoreErrorNewObjectNoData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New object has no name..
        /// </summary>
        public static string CoreErrorNewObjectNoName {
            get {
                return ResourceManager.GetString("CoreErrorNewObjectNoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outfit {0} has no animation files..
        /// </summary>
        public static string CoreErrorOutfitNoAnimation {
            get {
                return ResourceManager.GetString("CoreErrorOutfitNoAnimation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outfit has no description..
        /// </summary>
        public static string CoreErrorOutfitNoDescription {
            get {
                return ResourceManager.GetString("CoreErrorOutfitNoDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outfit has no name..
        /// </summary>
        public static string CoreErrorOutfitNoName {
            get {
                return ResourceManager.GetString("CoreErrorOutfitNoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outfit {0} has not defined ui_sub_category..
        /// </summary>
        public static string CoreErrorOutfitNoSubCategory {
            get {
                return ResourceManager.GetString("CoreErrorOutfitNoSubCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outfit {0} has not defined ui_slot..
        /// </summary>
        public static string CoreErrorOutfitNoUiSlot {
            get {
                return ResourceManager.GetString("CoreErrorOutfitNoUiSlot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outfit {0} has incorrect ui_slot. Must be one of: {1}..
        /// </summary>
        public static string CoreErrorOutfitUiSlotWrong {
            get {
                return ResourceManager.GetString("CoreErrorOutfitUiSlotWrong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outfit {0} has incorrect ui_sub_category. Must be one of: {1}..
        /// </summary>
        public static string CoreErrorOutfitUiSubCategoryWrong {
            get {
                return ResourceManager.GetString("CoreErrorOutfitUiSubCategoryWrong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occured when reading the version for the mod: (0).
        /// </summary>
        public static string CoreErrorReadingVersionForMod {
            get {
                return ResourceManager.GetString("CoreErrorReadingVersionForMod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shadow {0} has no Location set.
        /// </summary>
        public static string CoreErrorShadowHasNoLocation {
            get {
                return ResourceManager.GetString("CoreErrorShadowHasNoLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shadow {0} does not have a regular_sprite_name.
        /// </summary>
        public static string CoreErrorShadowHasNoSprite {
            get {
                return ResourceManager.GetString("CoreErrorShadowHasNoSprite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Category has no store..
        /// </summary>
        public static string CoreErrorStoreCategoryHasNoStore {
            get {
                return ResourceManager.GetString("CoreErrorStoreCategoryHasNoStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Category has no icon name..
        /// </summary>
        public static string CoreErrorStoreCategoryNoName {
            get {
                return ResourceManager.GetString("CoreErrorStoreCategoryNoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add item to store {0} and category {1} because it has an invalid season {2}..
        /// </summary>
        public static string CoreErrorStoreItemHasInvalidSeason {
            get {
                return ResourceManager.GetString("CoreErrorStoreItemHasInvalidSeason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item for store {0} has no category..
        /// </summary>
        public static string CoreErrorStoreItemHasNoCategory {
            get {
                return ResourceManager.GetString("CoreErrorStoreItemHasNoCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item for store {0}, category {1} has not specified an item..
        /// </summary>
        public static string CoreErrorStoreItemHasNoItem {
            get {
                return ResourceManager.GetString("CoreErrorStoreItemHasNoItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item has not been assigned to a store..
        /// </summary>
        public static string CoreErrorStoreItemHasNoStore {
            get {
                return ResourceManager.GetString("CoreErrorStoreItemHasNoStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating information for {0}.
        /// </summary>
        public static string CoreGeneratingInformationForMod {
            get {
                return ResourceManager.GetString("CoreGeneratingInformationForMod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Guessed Location: {0}.
        /// </summary>
        public static string CoreGuessedMistriaAt {
            get {
                return ResourceManager.GetString("CoreGuessedMistriaAt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing Textures/Sprites.
        /// </summary>
        public static string CoreImportingSprites {
            get {
                return ResourceManager.GetString("CoreImportingSprites", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finished.
        /// </summary>
        public static string CoreInstallCompleted {
            get {
                return ResourceManager.GetString("CoreInstallCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} installed in {1}.
        /// </summary>
        public static string CoreInstalledInReporter {
            get {
                return ResourceManager.GetString("CoreInstalledInReporter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} does not have a value.
        /// </summary>
        public static string CoreItemDoesNotHaveValue {
            get {
                return ResourceManager.GetString("CoreItemDoesNotHaveValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Looking for Mistria at {0}.
        /// </summary>
        public static string CoreLookingForMistriaAt {
            get {
                return ResourceManager.GetString("CoreLookingForMistriaAt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The manifest file must be named manifest.json..
        /// </summary>
        public static string CoreManifestFileNamedIncorrectly {
            get {
                return ResourceManager.GetString("CoreManifestFileNamedIncorrectly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The manifest must contain an author..
        /// </summary>
        public static string CoreManifestHasNoAuthor {
            get {
                return ResourceManager.GetString("CoreManifestHasNoAuthor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The manifest must contain a name..
        /// </summary>
        public static string CoreManifestHasNoName {
            get {
                return ResourceManager.GetString("CoreManifestHasNoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The manifest must contain a version..
        /// </summary>
        public static string CoreManifestHasNoVersion {
            get {
                return ResourceManager.GetString("CoreManifestHasNoVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Fields of Mistria location does not exist..
        /// </summary>
        public static string CoreMistriaLocationDoesNotExist {
            get {
                return ResourceManager.GetString("CoreMistriaLocationDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find Fields of Mistria location..
        /// </summary>
        public static string CoreMistriaNotFound {
            get {
                return ResourceManager.GetString("CoreMistriaNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields of Mistria not found, falling back to current folder.
        /// </summary>
        public static string CoreMistriaNotFoundFallback {
            get {
                return ResourceManager.GetString("CoreMistriaNotFoundFallback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mod location does not exist..
        /// </summary>
        public static string CoreModDirectoryDoesNotExist {
            get {
                return ResourceManager.GetString("CoreModDirectoryDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} has the following warnings, but will still install:.
        /// </summary>
        public static string CoreModHasWarnings {
            get {
                return ResourceManager.GetString("CoreModHasWarnings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This mod requires a newer version of the installer..
        /// </summary>
        public static string CoreModRequiresNewerInstaller {
            get {
                return ResourceManager.GetString("CoreModRequiresNewerInstaller", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mods installed in {0}.
        /// </summary>
        public static string CoreModsInstalledInTime {
            get {
                return ResourceManager.GetString("CoreModsInstalledInTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No data was found in file.
        /// </summary>
        public static string CoreNoDataInJSON {
            get {
                return ResourceManager.GetString("CoreNoDataInJSON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outfit file has no outfits..
        /// </summary>
        public static string CoreOutfitFileHasNoOutfits {
            get {
                return ResourceManager.GetString("CoreOutfitFileHasNoOutfits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to During install, MOMI will attempt to add an entry to your computers registry. For this, you&apos;ll be asked to give admin access to &quot;Registry Editor&quot; and to continue with an edit to the registry..
        /// </summary>
        public static string CorePreinstallWillInstallAurie {
            get {
                return ResourceManager.GetString("CorePreinstallWillInstallAurie", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to During install, MOMI will attempt to remove an entry from the computers Registry. As part of this, you&apos;ll be asked to grant admin access to the &quot;Registry Console Tool&quot;..
        /// </summary>
        public static string CorePreinstallWillRemoveAurie {
            get {
                return ResourceManager.GetString("CorePreinstallWillRemoveAurie", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading Textures/Sprites.
        /// </summary>
        public static string CoreReadingSprites {
            get {
                return ResourceManager.GetString("CoreReadingSprites", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skipping {0} for the following Errors:.
        /// </summary>
        public static string CoreSkippingModBecauseErrors {
            get {
                return ResourceManager.GetString("CoreSkippingModBecauseErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skipping {0} as it requires a newer version of the installer..
        /// </summary>
        public static string CoreSkippingModBecauseInstallerOld {
            get {
                return ResourceManager.GetString("CoreSkippingModBecauseInstallerOld", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} points to a sprite at {1} but that file does not exist.
        /// </summary>
        public static string CoreSpriteFileDoesNotExist {
            get {
                return ResourceManager.GetString("CoreSpriteFileDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sprite file has no sprites..
        /// </summary>
        public static string CoreSpriteFileHasNoSprites {
            get {
                return ResourceManager.GetString("CoreSpriteFileHasNoSprites", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} points to a sprite folder at {1} but that folder does not exist.
        /// </summary>
        public static string CoreSpriteFolderDoesNotExist {
            get {
                return ResourceManager.GetString("CoreSpriteFolderDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} points to a sprite folder at {1} but that directory is empty.
        /// </summary>
        public static string CoreSpriteFolderIsEmpty {
            get {
                return ResourceManager.GetString("CoreSpriteFolderIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Store file has no categories or items..
        /// </summary>
        public static string CoreStoreFileHasNoData {
            get {
                return ResourceManager.GetString("CoreStoreFileHasNoData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tileset file has no tilesets..
        /// </summary>
        public static string CoreTilesetsFileEmpty {
            get {
                return ResourceManager.GetString("CoreTilesetsFileEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Items file has no items..
        /// </summary>
        public static string CoreWarningItemFileHasNoItems {
            get {
                return ResourceManager.GetString("CoreWarningItemFileHasNoItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Objects file has no objects in it..
        /// </summary>
        public static string CoreWarningObjectFileHasNoObjects {
            get {
                return ResourceManager.GetString("CoreWarningObjectFileHasNoObjects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shadow file has no shadows..
        /// </summary>
        public static string CoreWarningShadowFileNoShadows {
            get {
                return ResourceManager.GetString("CoreWarningShadowFileNoShadows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing Textures/Sprites.
        /// </summary>
        public static string CoreWritingSprites {
            get {
                return ResourceManager.GetString("CoreWritingSprites", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mods Of Mistria Installer.
        /// </summary>
        public static string GUIApplicationTitle {
            get {
                return ResourceManager.GetString("GUIApplicationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No mods folder has been detected, but one can be created automatically for you..
        /// </summary>
        public static string GUICanCreateModsFolder {
            get {
                return ResourceManager.GetString("GUICanCreateModsFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find Fields of Mistria location. Try placing this in the same folder as Fields of Mistria..
        /// </summary>
        public static string GUICouldNotFindMistria {
            get {
                return ResourceManager.GetString("GUICouldNotFindMistria", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a mods folder. Try creating a folder called &apos;mods&apos; in the Fields of Mistria folder..
        /// </summary>
        public static string GUICouldNotFindMods {
            get {
                return ResourceManager.GetString("GUICouldNotFindMods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable All Mods.
        /// </summary>
        public static string GUIDisableAllMods {
            get {
                return ResourceManager.GetString("GUIDisableAllMods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable All Mods.
        /// </summary>
        public static string GUIEnableAllMods {
            get {
                return ResourceManager.GetString("GUIEnableAllMods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields of Mistria has been detected at: .
        /// </summary>
        public static string GUIFieldsOfMistriaDetectedLocation {
            get {
                return ResourceManager.GetString("GUIFieldsOfMistriaDetectedLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Welcome to the Mods of Mistria Installer!.
        /// </summary>
        public static string GUIGreetingText {
            get {
                return ResourceManager.GetString("GUIGreetingText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install.
        /// </summary>
        public static string GUIInstallButtonText {
            get {
                return ResourceManager.GetString("GUIInstallButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing mods....
        /// </summary>
        public static string GUIInstallInProgress {
            get {
                return ResourceManager.GetString("GUIInstallInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} by {1}.
        /// </summary>
        public static string GUIModByAuthor {
            get {
                return ResourceManager.GetString("GUIModByAuthor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This mod has errors and will not install.
        /// </summary>
        public static string GUIModHasErrors {
            get {
                return ResourceManager.GetString("GUIModHasErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This mod has warnings that can be ignored.
        /// </summary>
        public static string GUIModHasWarnings {
            get {
                return ResourceManager.GetString("GUIModHasWarnings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some mods require a newer version of the installer. Please update the installer..
        /// </summary>
        public static string GUIModsRequireNewerVersion {
            get {
                return ResourceManager.GetString("GUIModsRequireNewerVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check the boxes for all the mods you want to install:.
        /// </summary>
        public static string GUIModsWillBeInstalled {
            get {
                return ResourceManager.GetString("GUIModsWillBeInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No mods found to install.
        /// </summary>
        public static string GUINoModsToInstall {
            get {
                return ResourceManager.GetString("GUINoModsToInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pick a location for the log file.
        /// </summary>
        public static string GUIPickLogFile {
            get {
                return ResourceManager.GetString("GUIPickLogFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install Information.
        /// </summary>
        public static string GUIPreinstallInformationTitle {
            get {
                return ResourceManager.GetString("GUIPreinstallInformationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reload mod list.
        /// </summary>
        public static string GUIReloadModlist {
            get {
                return ResourceManager.GetString("GUIReloadModlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save Log File.
        /// </summary>
        public static string GUISaveLogFile {
            get {
                return ResourceManager.GetString("GUISaveLogFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields Of Mistria Location:.
        /// </summary>
        public static string GUISetupMistriaLocation {
            get {
                return ResourceManager.GetString("GUISetupMistriaLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mods Folder:.
        /// </summary>
        public static string GUISetupModsLocation {
            get {
                return ResourceManager.GetString("GUISetupModsLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall All.
        /// </summary>
        public static string GUIUninstallButtonText {
            get {
                return ResourceManager.GetString("GUIUninstallButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall Information.
        /// </summary>
        public static string GUIUninstallInformationTitle {
            get {
                return ResourceManager.GetString("GUIUninstallInformationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new version of the Mods Of Mistria Installer is available, please update.
        /// </summary>
        public static string GUIUpdateNagMessage {
            get {
                return ResourceManager.GetString("GUIUpdateNagMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Version Available.
        /// </summary>
        public static string GUIUpdateNagTitle {
            get {
                return ResourceManager.GetString("GUIUpdateNagTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You&apos;re running a 64-bit operating system, but have accidently downloaded the 32-bit version of MOMI. Please download the version of MOMI that does not include &quot;-x86&quot;..
        /// </summary>
        public static string GUIWarning32Bit {
            get {
                return ResourceManager.GetString("GUIWarning32Bit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 32-Bit Version Detected.
        /// </summary>
        public static string GUIWarning32BitTitle {
            get {
                return ResourceManager.GetString("GUIWarning32BitTitle", resourceCulture);
            }
        }
    }
}
